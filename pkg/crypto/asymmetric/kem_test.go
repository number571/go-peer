package asymmetric

import (
	"bytes"
	"testing"

	"github.com/cloudflare/circl/kem"
	"github.com/number571/go-peer/pkg/encoding"
)

func TestNewKEM(t *testing.T) {
	t.Parallel()

	if pk := newKEMPrivKey(&tsPrivateKeyKEM{}); pk != nil {
		t.Error("success get another kem privkey (not mlkem768)")
		return
	}

	if pk := newKEMPubKey(&tsPublicKeyKEM{}); pk != nil {
		t.Error("success get another kem pubkey (not mlkem768)")
		return
	}

	seed := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}

	privKey := NewKEMPrivKeyFromSeed(seed)
	if encoding.HexEncode(privKey.ToBytes()) != tcKEMPrivKey {
		t.Error("get another kem key from seed")
	}
}

func TestKEM(t *testing.T) {
	t.Parallel()

	privKey := NewKEMPrivKey()
	privKey = LoadKEMPrivKey(privKey.ToBytes())
	if pk := LoadKEMPrivKey([]byte{123}); pk != nil {
		t.Error("success load kem priv key")
		return
	}

	pubKey := privKey.GetPubKey()
	pubKey = LoadKEMPubKey(pubKey.ToBytes())
	if pk := LoadKEMPubKey([]byte{123}); pk != nil {
		t.Error("success load kem pub key")
		return
	}

	ct, ss1, err := pubKey.Encapsulate()
	if err != nil {
		t.Error(err)
		return
	}

	ss2, err := privKey.Decapsulate(ct)
	if err != nil {
		t.Error(err)
		return
	}

	if !bytes.Equal(ss1, ss2) {
		t.Error("invalid shared secret")
		return
	}

	// fmt.Println(len(privKey.ToBytes()))
	// fmt.Println(len(pubKey.ToBytes()), len(ct), len(ss1))
}

var (
	_ kem.PrivateKey = &tsPrivateKeyKEM{}
	_ kem.PublicKey  = &tsPublicKeyKEM{}
)

type tsPrivateKeyKEM struct{}
type tsPublicKeyKEM struct{}

func (p *tsPrivateKeyKEM) Scheme() kem.Scheme             { return nil }
func (p *tsPrivateKeyKEM) MarshalBinary() ([]byte, error) { return nil, nil }
func (p *tsPrivateKeyKEM) Equal(kem.PrivateKey) bool      { return false }
func (p *tsPrivateKeyKEM) Public() kem.PublicKey          { return nil }

func (p *tsPublicKeyKEM) Scheme() kem.Scheme             { return nil }
func (p *tsPublicKeyKEM) MarshalBinary() ([]byte, error) { return nil, nil }
func (p *tsPublicKeyKEM) Equal(kem.PublicKey) bool       { return false }

const (
	tcKEMPrivKey = "f06b9ab7b3c08a5657c203569c2c6bd6c0c1bac3cb3b48480e9a8900bccfbd84013811c6ca11a824231e48692bf544bb7b298e2ca0cb2611665d15030df55a8e767e7cb406243309803233c8313b0ae4623f183e4ccb5537d67fa7495d75f97b2bca349708a4a0619119b380a195c0bc405133aa5b4aa2be39e392e8146e6e2c390d66c1ae151ef73b4d01430f74c14a611b979df8b0fcbc0123d8aab5355acfa11dd9d8b64e3931034387e2836878878cb7f9c51b437a0f7153cbd46543827f05543834160768f55648407c18cb5014dba40f767d4888465596650770824e15028ba07778442a54e39d4ce948f2f323ba80acfaf1a7bad778b33cc6b80630624989dd287545f76576fc3893dccaf453a966710c671aa4d725bb8003b108615370c69d357b2196678fb7a6050e47926a492245803ff7c5b3eec5cb875b48208acfddd54e5fe062b39a95f6f870ebe18342759847c609cfd03f7342b99e3a0cb848c223903405a3137a92295f1425ce26b43506a89611354793505686c56a43679cdc9b75950ff8a65c8e5a2caa1ca246fc8227e571a3d542cfb49d3fbb8fa8e3912fd5905336c985c66fd68c24f660c8642590602c413fac17b0228b0cd737ed633e348a7d18b7c955c687161c4f7baa5fd0c97966860d2a711bac81c6910c2abbe02252383ffaf70919bc349b54bd2573b10bf1853758cb1790c12d6c377c3882c0c42cb491948ae7b8b550cb4dc0c3d4e76cb49c270dfc6a71f553bb66051cc518b6d0831b5a402a79699c2a806576ab2ce66b6482741c5c96ec33c79bb1670717899fcbadc894bc8a36cb879aa50b1c1be2baaa9c84168703b2334228a3eb2259b961e5c100568cb9cab05cf341a6b5d79162112da7ac18af6c47209362a7f2c30496885f24b95ad40fe312629a5129638719521819e513751a215a664859195c63f553403c31be5fc323e6c135a6a752e8e5503ebac55860c33d025f14c0c945ab8e93308c57c074a9408359015f52859d4c23ba5742cf71f29246977978e02d702c4ab11ba69769cff93570a8f8304cc3526984af757c314677361b27b842f646bcd4b327eba94203874b76b380faa005ccca5531197da5726e9399a51a97c3175dd2e0b318ecc2c0c2cf4cb378f7f20308b36399e6b9ba91527cca959d78035bb27199d6c8c98a2b149cb206c977db5245521c0334d37e03b4864e6c92a22b5c5b5c182ba22089f6ac22b0b4f6cc16a6c10f7701b19c951b47e93acfdb7b41785e683b8aa237c49b1c91eb54110bfc625f2a1c8fb664fbf67ec2e4ac2f7b61fc4016e94a716804c8e5e67b7c163bbc2bc1ac7924533b020d62c7d6c7baf292a52e90859df1b0c0c82a165abd654b59d285b51db0310f9675110b2db75ab11775714fa966cd76cef27284d1eb62eab4131e1b9fd1782490d16050c5aeddc815d58472e4294da1079bc1228f6feb116d8b103fb09a6da75474927ccf3923f02a9a18ac51f6a33b3b7827eb0051655579b71066fd9c8b5c5989e3b0282a4ca2be1b65663201a8b4b505f3ac12e53447d09d1cc0163eb585f2ac4930aa6487146c6ffb0ec27a4773ca8b72c4bf9503144beb5cca298ec29a10fb6a9ce2f784659717deb2b867fc2397dc212cf0ab35e57477f79502573f6cf6b41b58904abc7cd5577c61d8a2a7117514b99050c2abc6fa15bf06a34b98b0c42a40446b1434803078337f0b972215bcb23305ada598ced873a60a602c4f5b753dc52a1951749e364c2ce7b1b5973fae218857291e76c6b0bf490c96b921c321b93f687a6d5cc0483a3ac0713b2e0ca81277b3a14804c3019edc318cf237b329d5a660a508fd4666fbe52c81cb846d99c76f8c5529546f0c2421c0351737b78f620704f21034b29449a4eb97e8e2ccdd68b40d71ae6dc050c74bba32cc0a6470034cda2df7569af9c38fb554538984555d4c55d3930754c1a03a075e76f654d6c9cd0e217e0a1755ed8954b71bc30921926b0aa44d17bbd5c891848724ddec65ed8584bd45686dba7434e5c59689053ba75d296465d4d89c99757a631ba70859675f9acf19998e72010e596a6939c657a55939d6ebbfb6f8c3155425f42b9f34e42e851467f7903f8af23d37971f0a17c02de68d502114f2e85a30885baf90b01e99ac66c96908902573102a30b7953b001f471a0ececc27dff70122845655ac28ae4c9d3b4ab1df42c6e8287b7a160c710743c32692aed852c212c88ff837eb24307907a585c36b74002317117c35d610a6789137969900ca2223b948539a7467f32f1cba2087c44c5f4cb52a0bbfcf998edc96422ae7191a5a34641759c641c1841b5862f87c924b25d3172590803594c2b428d143151489844a49390660fc02bd35fc07fc2b17f61c70371b9698e8bebef37fa0229ce6e539c20118e1a58f0779a9c47c8ead417fa0ba972a08239393692c804ef3c9799c5b2852881284134fac031c2620c73cc66f9dbacbb3a99c68e6bb23a25fc266c7aff1080324220d97614cf913002a9151c0641cd9a6ea61905253183a6986a1548eaa13663c22c766cc2cb8b1749a81848276bedcf87d099111f560cc52e90b091704d5d50a2f495498f4692dc0272820a45d68946a7b9f39730d1e08b3b7938b310747eed2c116c005641c51cfbb43afc799c1b5af8a251afac28f45209e53844082055c511625fba3c2d7d4acb27a5f584168b878610e7084a46265fbc89933545f0266a83cdc25021320621703ec4c72b9eb8edc6649c868bd88342cf4e03dfbe01c2a3372219a7280f7c6f19abbc0f044c3d52df52656a2512ad70775fa2b6a790620c495157bf854d1a3bc241b60954c1564c3b44da91ebbe1cd44b2673b7c23bab78c84f741daaa1768067959a70f683b66962149786940e1b439d7b48f6d1a49ecd5766a6095146bb2a2490ec2874643d9aec798195135c1a253301f9c900034c2f054123aa6c65698b36dec6b03b20e9218b36f6a29a1a29823f5c343925e10cb153b118365182cbcdcce6029bb86e93379c076914bc0f8ec302d30461af70bd41a0af42b8b02495d3ca307857cc1eb8c586c023a8a9301b7cbbd11134a68c26b79e50817a195d026802ee31f9806a0f0522bc69b0779c360e2d91fd72773f76c364443aa69c24640fba9bdf25bfd996f1b2051fd8b427e9a158a8688a6c37027b8690575a9a8c829b518cb05b55f8363b7445671b8519f771447eb25bca0337451644c87b003a86b666ab115e8ef8f841655aea8d52c5640b73c636abbeb1cfcf3a18c128194ea649ed0856bf2bc25822831ef54264bee3f9774934802ffceb9e8b4fd82e6b01cc26e0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"
)
